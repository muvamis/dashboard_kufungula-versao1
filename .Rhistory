Percentagem = round(freq, digits = 0)) %>%
ungroup()
tab_freq_PI_all <- presencas_PI %>%
group_by(FormacaoPI, Sexo,presenca) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n) * 100,
Percentagem = round(freq, digits = 0)) %>%
ungroup()
View(tab_freq_PI_all)
Kufungula <- read_excel("Data/Lista_Selecionados_Kufungula.xlsx")
Presencas_clear <- read_dta("Data/Presencas_clear.dta")
###Limpeza
##Unir as duas bases de dados
Presencas <- left_join(Presencas_clear, Kufungula, by = "ID_Participante") ## Merge com base geral
# Selecione apenas as colunas desejadas em Presencas_atualizado
Presencas$Comunidade <- ifelse(is.na(Presencas$Comunidade.y), Presencas$Comunidade.x, Presencas$Comunidade.y)
Presencas$Distrito <- ifelse(is.na(Presencas$Distrito), Presencas$Distrito, Presencas$Distrito)
Presencas <- Presencas %>%
select(
Nome_Participante,
Provincia,
Idade,
Distrito,
Deslocado,
Comunidade,
Sexo,
Facilitator,
Formation_PI,
Session_PI,
Formation_AG,
Session,
ID_Participante,
Presenca,
Reposicao_sessao
)
Presencas$Distrito <- sub("Ribaué", "Ribaue", Presencas$Distrito)
### Replace library(dplyr)
# Suponha que df é seu dataframe e sessao_PI é a variável a ser modificada
Presencas <- Presencas %>%
mutate(Session_PI = case_when(
Session_PI == "Introdução: Pontos-Chave  (Proatividade e Reatividade, Pensar no futuro, Superar obstáculos, Explorar iniciativas pessoais))" ~ "Sessao 1",
Session_PI == "O processo  empreendedor (Identificando oportunidades de negócio,  Tu e a IP,  Recursos)" ~ "Sessao 2",
Session_PI == "O Processo Empreendedor Identificando Oportunidades de  Negócio (Mercado,  Avaliação & Comentários)" ~ "Sessao 3",
Session_PI == "O Processo  Empreendedor Definição de Metas,  Planejamento" ~ "Sessao 4",
Session_PI == "O Processo Empreendedor (Planejamento: Arranjar financiamento,  Estabelecer ligações,  Monitorar o progresso,  Contabilidade &  Poupança)" ~ "Sessao 5",
Session_PI == "O Processo  Empreendedor (Comentários:  Experimentar, Erros)" ~ "Sessao 6",
Session_PI == "Iniciativa Pessoal (Superar Obstáculos - Ténicas de resolução de  problemas)" ~ "Sessao 7",
Session_PI == "Iniciativa Pessoal (Superar obstáculos - Técnicas de resolução de  problemas)" ~ "Sessao 8",
Session_PI == "Revisão" ~ "Sessao 9",
TRUE ~ Session_PI # Mantém o valor original caso não corresponda a nenhum dos anteriores
))
############################################################################################
Presencas <- Presencas %>%
mutate(Session = case_when(
Session == "Abordagem sobre principios basicos de implementação de FFS" ~ "Sessao 1",
Session == "Criterios de Identificação de areas para estabelecimento dos FFS (DRP)" ~ "Sessao 2",
Session == "Demarcaçao de campos de(Parcelas para monocultura e culturas de consorciação)" ~ "Sessao 3",
Session == "Sessões de demonstração de diversas técnicas de sementeira" ~ "Sessao 4",
Session == "Sessões de Controlo de pragas e Infestantes (produção de pesticidas botanicos)" ~ "Sessao 5",
Session == "Sessões de Monitoria de campos (estagio fenologico da cultura)Tecnica de AESA" ~ "Sessao 6",
Session == "Tecnicas de cuidados pre colheita, colheita e pos colheita (PHM)" ~ "Sessao 7",
Session == "Abordagem do Sistema de Desenvolvimento de Mercados (Ligação com o mercado)" ~ "Sessao 8",
TRUE ~ Session # Mantém o valor original caso não corresponda a nenhum dos anteriores
))
#######################################################################################################
# Aplicar a função às colunas do DataFrame
Presencas$Distrito <- remove_accents(Presencas$Distrito)
Presencas$Presenca <- remove_accents(Presencas$Presenca)
Presencas$Deslocado <- remove_accents(Presencas$Deslocado)
Presencas$Facilitator <- remove_accents(Presencas$Facilitator)
Presencas$Formation_AG <- remove_accents(Presencas$Formation_AG)
Presencas$Formation_PI <- remove_accents(Presencas$Formation_PI)
# Transformar as colunas em maiúsculas
Presencas$Distrito <- toupper(Presencas$Distrito)
Presencas$Presenca <- toupper(Presencas$Presenca)
Presencas$Deslocado <- toupper(Presencas$Deslocado)
Presencas$Facilitator <- toupper(Presencas$Facilitator)
Presencas$Formation_AG <- toupper(Presencas$Formation_AG)
Presencas$Formation_PI <- toupper(Presencas$Formation_PI)
###############################################################################
Data_presenca <-  Presencas %>%
rename(presenca=Presenca,
FormacaoPI=Session_PI,
NomeSessao=Session)
presencas_PI<-filter(Data_presenca, Data_presenca$Formation_PI=="SIM")
presencas_AG<-filter(Data_presenca, Data_presenca$Formation_AG=="SIM")
################  Tabela ##################################################
tab_freq_PI <- presencas_PI %>%
group_by(Distrito, FormacaoPI, Sexo,presenca) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n) * 100,
Percentagem = round(freq, digits = 0)) %>%
ungroup()
##all
tab_freq_PI_all <- presencas_PI %>%
group_by(FormacaoPI, Sexo,presenca) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n) * 100,
Percentagem = round(freq, digits = 0)) %>%
ungroup()
# Seu código para criar tab_freq_AG
tab_freq_AG <- presencas_AG %>%
group_by(Distrito, NomeSessao, Sexo,presenca) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n) * 100,
Percentagem = round(freq, digits = 0)) %>%
ungroup()
###ALL
tab_freq_AG_all <- presencas_AG %>%
group_by(NomeSessao, Sexo,presenca) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n) * 100,
Percentagem = round(freq, digits = 0)) %>%
ungroup()
View(tab_freq_AG_all)
tab_freq_AG_all <- presencas_AG %>%
group_by(Sexo,NomeSessao, presenca) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n) * 100,
Percentagem = round(freq, digits = 0)) %>%
ungroup()
tab_freq_AG_all <- presencas_AG %>%
group_by(Sexo,NomeSessao, presenca) %>%
summarise(n = n(), .groups = 'drop') %>%
mutate(freq = n / sum(n) * 100,
Percentagem = round(freq, digits = 0)) %>%
ungroup()
tab_freq_AG_all <- presencas_AG %>%
group_by(Sexo,NomeSessao, presenca) %>%
summarise(n = n(), .groups = 'drop') %>%
mutate(freq = n / sum(n) * 100,
Percentagem = round(freq, digits = 0)) %>%
ungroup()
View(tab_freq_AG_all)
presencas_AG
View(presencas_AG)
source("C:/Users/MUVA/OneDrive/Projectos Rstudio/2023/dashboard_kufungula-versao1/R/Data.R")
shiny::runApp()
Kufungula <- read_excel("Data/Lista_Selecionados_Kufungula.xlsx")
Presencas_clear <- read_dta("Data/Presencas_clear.dta")
###Limpeza
##Unir as duas bases de dados
Presencas <- left_join(Presencas_clear, Kufungula, by = "ID_Participante") ## Merge com base geral
# Selecione apenas as colunas desejadas em Presencas_atualizado
Presencas$Comunidade <- ifelse(is.na(Presencas$Comunidade.y), Presencas$Comunidade.x, Presencas$Comunidade.y)
Presencas$Distrito <- ifelse(is.na(Presencas$Distrito), Presencas$Distrito, Presencas$Distrito)
Presencas <- Presencas %>%
select(
Nome_Participante,
Provincia,
Idade,
Distrito,
Deslocado,
Comunidade,
Sexo,
Facilitator,
Formation_PI,
Session_PI,
Formation_AG,
Session,
ID_Participante,
Presenca,
Reposicao_sessao
)
Presencas$Distrito <- sub("Ribaué", "Ribaue", Presencas$Distrito)
### Replace library(dplyr)
# Suponha que df é seu dataframe e sessao_PI é a variável a ser modificada
Presencas <- Presencas %>%
mutate(Session_PI = case_when(
Session_PI == "Introdução: Pontos-Chave  (Proatividade e Reatividade, Pensar no futuro, Superar obstáculos, Explorar iniciativas pessoais))" ~ "Sessao 1",
Session_PI == "O processo  empreendedor (Identificando oportunidades de negócio,  Tu e a IP,  Recursos)" ~ "Sessao 2",
Session_PI == "O Processo Empreendedor Identificando Oportunidades de  Negócio (Mercado,  Avaliação & Comentários)" ~ "Sessao 3",
Session_PI == "O Processo  Empreendedor Definição de Metas,  Planejamento" ~ "Sessao 4",
Session_PI == "O Processo Empreendedor (Planejamento: Arranjar financiamento,  Estabelecer ligações,  Monitorar o progresso,  Contabilidade &  Poupança)" ~ "Sessao 5",
Session_PI == "O Processo  Empreendedor (Comentários:  Experimentar, Erros)" ~ "Sessao 6",
Session_PI == "Iniciativa Pessoal (Superar Obstáculos - Ténicas de resolução de  problemas)" ~ "Sessao 7",
Session_PI == "Iniciativa Pessoal (Superar obstáculos - Técnicas de resolução de  problemas)" ~ "Sessao 8",
Session_PI == "Revisão" ~ "Sessao 9",
TRUE ~ Session_PI # Mantém o valor original caso não corresponda a nenhum dos anteriores
))
############################################################################################
Presencas <- Presencas %>%
mutate(Session = case_when(
Session == "Abordagem sobre principios basicos de implementação de FFS" ~ "Sessao 1",
Session == "Criterios de Identificação de areas para estabelecimento dos FFS (DRP)" ~ "Sessao 2",
Session == "Demarcaçao de campos de(Parcelas para monocultura e culturas de consorciação)" ~ "Sessao 3",
Session == "Sessões de demonstração de diversas técnicas de sementeira" ~ "Sessao 4",
Session == "Sessões de Controlo de pragas e Infestantes (produção de pesticidas botanicos)" ~ "Sessao 5",
Session == "Sessões de Monitoria de campos (estagio fenologico da cultura)Tecnica de AESA" ~ "Sessao 6",
Session == "Tecnicas de cuidados pre colheita, colheita e pos colheita (PHM)" ~ "Sessao 7",
Session == "Abordagem do Sistema de Desenvolvimento de Mercados (Ligação com o mercado)" ~ "Sessao 8",
TRUE ~ Session # Mantém o valor original caso não corresponda a nenhum dos anteriores
))
#######################################################################################################
# Aplicar a função às colunas do DataFrame
Presencas$Distrito <- remove_accents(Presencas$Distrito)
####Funcoes
# Função para remover acentuação
remove_accents <- function(text) {
text <- tolower(text)
text <- str_replace_all(text, "[^a-z0-9 ]", "")
return(text)
}
Kufungula <- read_excel("Data/Lista_Selecionados_Kufungula.xlsx")
Presencas_clear <- read_dta("Data/Presencas_clear.dta")
###Limpeza
##Unir as duas bases de dados
Presencas <- left_join(Presencas_clear, Kufungula, by = "ID_Participante") ## Merge com base geral
# Selecione apenas as colunas desejadas em Presencas_atualizado
Presencas$Comunidade <- ifelse(is.na(Presencas$Comunidade.y), Presencas$Comunidade.x, Presencas$Comunidade.y)
Presencas$Distrito <- ifelse(is.na(Presencas$Distrito), Presencas$Distrito, Presencas$Distrito)
Presencas <- Presencas %>%
select(
Nome_Participante,
Provincia,
Idade,
Distrito,
Deslocado,
Comunidade,
Sexo,
Facilitator,
Formation_PI,
Session_PI,
Formation_AG,
Session,
ID_Participante,
Presenca,
Reposicao_sessao
)
Presencas$Distrito <- sub("Ribaué", "Ribaue", Presencas$Distrito)
### Replace library(dplyr)
# Suponha que df é seu dataframe e sessao_PI é a variável a ser modificada
Presencas <- Presencas %>%
mutate(Session_PI = case_when(
Session_PI == "Introdução: Pontos-Chave  (Proatividade e Reatividade, Pensar no futuro, Superar obstáculos, Explorar iniciativas pessoais))" ~ "Sessao 1",
Session_PI == "O processo  empreendedor (Identificando oportunidades de negócio,  Tu e a IP,  Recursos)" ~ "Sessao 2",
Session_PI == "O Processo Empreendedor Identificando Oportunidades de  Negócio (Mercado,  Avaliação & Comentários)" ~ "Sessao 3",
Session_PI == "O Processo  Empreendedor Definição de Metas,  Planejamento" ~ "Sessao 4",
Session_PI == "O Processo Empreendedor (Planejamento: Arranjar financiamento,  Estabelecer ligações,  Monitorar o progresso,  Contabilidade &  Poupança)" ~ "Sessao 5",
Session_PI == "O Processo  Empreendedor (Comentários:  Experimentar, Erros)" ~ "Sessao 6",
Session_PI == "Iniciativa Pessoal (Superar Obstáculos - Ténicas de resolução de  problemas)" ~ "Sessao 7",
Session_PI == "Iniciativa Pessoal (Superar obstáculos - Técnicas de resolução de  problemas)" ~ "Sessao 8",
Session_PI == "Revisão" ~ "Sessao 9",
TRUE ~ Session_PI # Mantém o valor original caso não corresponda a nenhum dos anteriores
))
############################################################################################
Presencas <- Presencas %>%
mutate(Session = case_when(
Session == "Abordagem sobre principios basicos de implementação de FFS" ~ "Sessao 1",
Session == "Criterios de Identificação de areas para estabelecimento dos FFS (DRP)" ~ "Sessao 2",
Session == "Demarcaçao de campos de(Parcelas para monocultura e culturas de consorciação)" ~ "Sessao 3",
Session == "Sessões de demonstração de diversas técnicas de sementeira" ~ "Sessao 4",
Session == "Sessões de Controlo de pragas e Infestantes (produção de pesticidas botanicos)" ~ "Sessao 5",
Session == "Sessões de Monitoria de campos (estagio fenologico da cultura)Tecnica de AESA" ~ "Sessao 6",
Session == "Tecnicas de cuidados pre colheita, colheita e pos colheita (PHM)" ~ "Sessao 7",
Session == "Abordagem do Sistema de Desenvolvimento de Mercados (Ligação com o mercado)" ~ "Sessao 8",
TRUE ~ Session # Mantém o valor original caso não corresponda a nenhum dos anteriores
))
#######################################################################################################
# Aplicar a função às colunas do DataFrame
Presencas$Distrito <- remove_accents(Presencas$Distrito)
Presencas$Presenca <- remove_accents(Presencas$Presenca)
Presencas$Deslocado <- remove_accents(Presencas$Deslocado)
Presencas$Facilitator <- remove_accents(Presencas$Facilitator)
Presencas$Formation_AG <- remove_accents(Presencas$Formation_AG)
Presencas$Formation_PI <- remove_accents(Presencas$Formation_PI)
# Transformar as colunas em maiúsculas
Presencas$Distrito <- toupper(Presencas$Distrito)
Presencas$Presenca <- toupper(Presencas$Presenca)
Presencas$Deslocado <- toupper(Presencas$Deslocado)
Presencas$Facilitator <- toupper(Presencas$Facilitator)
Presencas$Formation_AG <- toupper(Presencas$Formation_AG)
Presencas$Formation_PI <- toupper(Presencas$Formation_PI)
###############################################################################
Data_presenca <-  Presencas %>%
rename(presenca=Presenca,
FormacaoPI=Session_PI,
NomeSessao=Session)
presencas_PI<-filter(Data_presenca, Data_presenca$Formation_PI=="SIM")
presencas_AG<-filter(Data_presenca, Data_presenca$Formation_AG=="SIM")
################  Tabela ##################################################
tab_freq_PI <- presencas_PI %>%
group_by(Distrito, FormacaoPI, Sexo,presenca) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n) * 100,
Percentagem = round(freq, digits = 0)) %>%
ungroup()
##all
tab_freq_PI_all <- presencas_PI %>%
group_by(FormacaoPI, Sexo,presenca) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n) * 100,
Percentagem = round(freq, digits = 0)) %>%
ungroup()
# Seu código para criar tab_freq_AG
tab_freq_AG <- presencas_AG %>%
group_by(Distrito, NomeSessao, Sexo,presenca) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n) * 100,
Percentagem = round(freq, digits = 0)) %>%
ungroup()
###ALL
tab_freq_AG_all <- presencas_AG %>%
group_by(NomeSessao,Sexo, presenca) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n) * 100,
Percentagem = round(freq, digits = 0)) %>%
ungroup()
View(tab_freq_AG_all)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
resultado <- Data_presenca %>% filter(presenca=="SIM") %>%
group_by(Distrito, Sexo, faixa_etaria) %>%
summarize(contagem = n()) %>%
ungroup() %>%
group_by(Distrito, Sexo) %>%
mutate(totais = sum(contagem)) %>%
spread(faixa_etaria, contagem) %>%
rename("Faixa Etária 18-24" = "18-24", "Faixa Etária 25-35" = "25-35") %>%
filter(!is.na(`Faixa Etária 18-24`) & !is.na(`Faixa Etária 25-35`))
# Crie intervalos de idade desejados
intervalos_idade <- c(17, 24, 35)
#
# Use a função cut para criar fatores para intervalos de idade
Data_presenca <- Data_presenca %>%
mutate(faixa_etaria = cut(Idade, breaks = intervalos_idade, labels = c("18-24", "25-35")))
resultado <- Data_presenca %>% filter(presenca=="SIM") %>%
group_by(Distrito, Sexo, faixa_etaria) %>%
summarize(contagem = n()) %>%
ungroup() %>%
group_by(Distrito, Sexo) %>%
mutate(totais = sum(contagem)) %>%
spread(faixa_etaria, contagem) %>%
rename("Faixa Etária 18-24" = "18-24", "Faixa Etária 25-35" = "25-35") %>%
filter(!is.na(`Faixa Etária 18-24`) & !is.na(`Faixa Etária 25-35`))
View(resultado)
Tabela_AG <- Data_presenca %>%
filter(Data_presenca == "Sim") %>%  # Filtrar apenas as presenças confirmadas
group_by(Distrito, Sexo, NomeSessao) %>%
summarise(
totais = n(),  # Contagem total por grupo
`Faixa Etária 18-24` = sum(FaixaEtaria18_24, na.rm = TRUE),  # Substituir pelos nomes de colunas corretos
`Faixa Etária 25-35` = sum(FaixaEtaria25_35, na.rm = TRUE)   # Substituir pelos nomes de colunas corretos
) %>%
ungroup()
# Criação da tabela agregada
Tabela_AG <- Data_presenca %>%
filter(Data_presenca$presenca == "SIM") %>%  # Filtrar apenas as presenças confirmadas
group_by(Distrito, Sexo, NomeSessao) %>%
summarise(
totais = n(),  # Contagem total por grupo
`Faixa Etária 18-24` = sum(FaixaEtaria18_24, na.rm = TRUE),  # Substituir pelos nomes de colunas corretos
`Faixa Etária 25-35` = sum(FaixaEtaria25_35, na.rm = TRUE)   # Substituir pelos nomes de colunas corretos
) %>%
ungroup()
# Suponha que você tenha uma coluna 'Idade'. Você criaria as colunas de faixa etária assim:
Data_presenca <- Data_presenca %>%
mutate(`Faixa Etária 18-24` = ifelse(Idade >= 18 & Idade <= 24, 1, 0),
`Faixa Etária 25-35` = ifelse(Idade > 24 & Idade <= 35, 1, 0))
# Criação da tabela agregada
Tabela_AG <- Data_presenca %>%
filter(Data_presenca$presenca == "SIM") %>%  # Filtrar apenas as presenças confirmadas
group_by(Distrito, Sexo, NomeSessao) %>%
summarise(
totais = n(),  # Contagem total por grupo
`Faixa Etária 18-24` = sum(FaixaEtaria18_24, na.rm = TRUE),  # Substituir pelos nomes de colunas corretos
`Faixa Etária 25-35` = sum(FaixaEtaria25_35, na.rm = TRUE)   # Substituir pelos nomes de colunas corretos
) %>%
ungroup()
# Criação da tabela agregada
Tabela_AG <- Data_presenca %>%
filter(Data_presenca$presenca == "SIM") %>%  # Filtrar apenas as presenças confirmadas
group_by(Distrito, Sexo, NomeSessao) %>%
summarise(
totais = n(),  # Contagem total por grupo
`Faixa Etária 18-24` = sum(`Faixa Etária 18-24`, na.rm = TRUE),
`Faixa Etária 25-35` = sum(`Faixa Etária 25-35`, na.rm = TRUE)
) %>%
ungroup()
View(Tabela_AG)
# Adicionar a linha de totais acumulados no fim da tabela
total_acumulado <- tab_freq_AG_all %>%
summarise(
Distrito = "Total Acumulado",
Sexo = NA_character_,
NomeSessao = NA_character_,
totais = sum(totais),
`Faixa Etária 18-24` = sum(`Faixa Etária 18-24`),
`Faixa Etária 25-35` = sum(`Faixa Etária 25-35`)
)
# Adicionar a linha de totais acumulados no fim da tabela
total_acumulado <- Tabela_AG %>%
summarise(
Distrito = "Total Acumulado",
Sexo = NA_character_,
NomeSessao = NA_character_,
totais = sum(totais),
`Faixa Etária 18-24` = sum(`Faixa Etária 18-24`),
`Faixa Etária 25-35` = sum(`Faixa Etária 25-35`)
)
View(total_acumulado)
Tabela_AG <- bind_rows(tab_freq_AG_all, total_acumulado)
View(Tabela_AG)
############################################################################
# Suponha que você tenha uma coluna 'Idade'. Você criaria as colunas de faixa etária assim:
presencas_PI <- presencas_PI %>%
mutate(`Faixa Etária 18-24` = ifelse(Idade >= 18 & Idade <= 24, 1, 0),
`Faixa Etária 25-35` = ifelse(Idade > 24 & Idade <= 35, 1, 0))
# Criação da tabela agregada
Tabela_PI<- presencas_PI %>%
filter(presencas_PI$presenca == "SIM") %>%  # Filtrar apenas as presenças confirmadas
group_by(Distrito, Sexo, NomeSessao) %>%
summarise(
totais = n(),  # Contagem total por grupo
`Faixa Etária 18-24` = sum(`Faixa Etária 18-24`, na.rm = TRUE),
`Faixa Etária 25-35` = sum(`Faixa Etária 25-35`, na.rm = TRUE)
) %>%
ungroup()
presencas_AG <- presencas_AG %>%
mutate(`Faixa Etária 18-24` = ifelse(Idade >= 18 & Idade <= 24, 1, 0),
`Faixa Etária 25-35` = ifelse(Idade > 24 & Idade <= 35, 1, 0))
# Criação da tabela agregada
Tabela_AG <- presencas_AG %>%
filter(presencas_AG$presenca == "SIM") %>%  # Filtrar apenas as presenças confirmadas
group_by(Distrito, Sexo, NomeSessao) %>%
summarise(
totais = n(),  # Contagem total por grupo
`Faixa Etária 18-24` = sum(`Faixa Etária 18-24`, na.rm = TRUE),
`Faixa Etária 25-35` = sum(`Faixa Etária 25-35`, na.rm = TRUE)
) %>%
ungroup()
Data_presenca <- Data_presenca %>%
mutate(`Faixa Etária 18-24` = ifelse(Idade >= 18 & Idade <= 24, 1, 0),
`Faixa Etária 25-35` = ifelse(Idade > 24 & Idade <= 35, 1, 0))
# Criação da tabela agregada
Tabela_AL<- Data_presenca %>%
filter(Data_presenca$presenca == "SIM") %>%  # Filtrar apenas as presenças confirmadas
group_by(Distrito, Sexo) %>%
summarise(
totais = n(),  # Contagem total por grupo
`Faixa Etária 18-24` = sum(`Faixa Etária 18-24`, na.rm = TRUE),
`Faixa Etária 25-35` = sum(`Faixa Etária 25-35`, na.rm = TRUE)
) %>%
ungroup()
View(Tabela_AL)
source("C:/Users/MUVA/OneDrive/Projectos Rstudio/2023/dashboard_kufungula-versao1/R/Data.R")
runApp()
Data_Individual_PI <- presencas_PI %>%
select(Nome_Participante, NomeSessao, presenca,Distrito, Comunidade )
Data_Individual_AG <- presencas_AG %>%
select(Nome_Participante, NomeSessao, presenca,Distrito, Comunidade )
Data_Individual_AG <- presencas_AG %>%
select(Nome_Participante, NomeSessao, presenca,Distrito, Comunidade )
View(Data_Individual_AG)
wide_data <- Data_Individual_PI %>%
unite(Nome_Participante, c("Nome_Participante", "Distrito", "Comunidade"), remove = FALSE) %>%
spread(key = NomeSessao, value = presenca, fill = "NAO")
install.packages("rlang")
wide_data <- Data_Individual_PI %>%
unite(Nome_Participante, c("Nome_Participante", "Distrito", "Comunidade"), remove = FALSE) %>%
spread(key = NomeSessao, value = presenca, fill = "NAO")
source("C:/Users/MUVA/OneDrive/Projectos Rstudio/2023/dashboard_kufungula-versao1/R/01 PACKAGES.R")
wide_data <- Data_Individual_PI %>%
unite(Nome_Participante, c("Nome_Participante", "Distrito", "Comunidade"), remove = FALSE) %>%
spread(key = NomeSessao, value = presenca, fill = "NAO")
rlang::last_trace()
data_united <- Data_Individual_AG %>%
unite("Nome_Completo", Nome_Participante, Distrito, Comunidade, sep = " ", remove = FALSE)
# Step 2: Use pivot_wider to transform the data from long to wide format
final_data <- data_united %>%
pivot_wider(names_from = NomeSessao, values_from = presenca, values_fill = list(presenca = "NAO"))
View(data_united)
final_data <- data_united %>%
pivot_wider(names_from = NomeSessao, values_from = presenca, values_fill = list(presenca = "NAO"))
final_data <- data_united %>%
pivot_wider(names_from = NomeSessao, values_from = presenca)
View(final_data)
final_data_AG <- Data_Individual_AG %>%
pivot_wider(names_from = NomeSessao, values_from = presenca)
final_data_PI <- Data_Individual_PI %>%
pivot_wider(names_from = NomeSessao, values_from = presenca)
View(final_data_AG)
source("C:/Users/MUVA/OneDrive/Projectos Rstudio/2023/dashboard_kufungula-versao1/R/01 PACKAGES.R")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Filtrar dados baseado no distrito selecionado
dadosFiltrados <- reactive({
if (input$distritoInput == "Todos") {
return(Kufungula)
} else {
return(subset(Kufungula, Província == input$distritoInput))
}
})
runApp()
runApp()
runApp()
